<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:c='http://www.springframework.org/schema/c'
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
    http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd" default-autowire="byName">

    <!-- 引入属性文件 -->
    <!--<context:property-placeholder location="classpath:config.properties"/>-->
    <util:properties id="config" location="classpath:config.properties"/>
    <!--<util:properties id="message" location="classpath:message.properties"/>-->
    <util:properties id="initData" location="classpath:initData.properties"/>
    <!-- 自动扫描(自动注入) -->
    <!--<context:component-scan base-package="com.ygo" scoped-proxy="interfaces"/>-->
    <context:component-scan base-package="com.yg.dao.impl,com.yg.core" />
    <context:annotation-config/>

    <!--    <aop:config>
            <aop:aspect ref="logService">
                <aop:pointcut id="logServicePointcuts"
                              expression="execution(* com.hehenian.biz.service..*.*(..))" />
                <aop:around pointcut-ref="logServicePointcuts" method="around" />
            </aop:aspect>
        </aop:config>-->
    <!-- 阿里 druid数据库连接池 -->
    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" abstract="true">
        <property name="filters" value="#{config['jdbc.filters']}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="#{config['jdbc.maxActive']}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="#{config['jdbc.initialSize']}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="#{config['jdbc.maxWait']}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="#{config['jdbc.minIdle']}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="#{config['jdbc.timeBetweenEvictionRunsMillis']}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="#{config['jdbc.minEvictableIdleTimeMillis']}"/>
        <property name="validationQuery" value="#{config['jdbc.validationQuery']}"/>
        <property name="testWhileIdle" value="#{config['jdbc.testWhileIdle']}"/>
        <property name="testOnBorrow" value="#{config['jdbc.testOnBorrow']}"/>
        <property name="testOnReturn" value="#{config['jdbc.testOnReturn']}"/>
        <property name="maxOpenPreparedStatements" value="#{config['jdbc.maxOpenPreparedStatements']}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="#{config['jdbc.removeAbandoned']}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="#{config['jdbc.removeAbandonedTimeout']}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="#{config['jdbc.logAbandoned']}"/>
    </bean>
    <!--主数据源-->
    <bean id="master" parent="parentDataSource">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="#{config['jdbc.url']}"/>
        <property name="username" value="#{config['jdbc.username']}"/>
        <property name="password" value="#{config['jdbc.password']}"/>
        <property name="driverClassName" value="#{config['jdbc.driverClassName']}"/>
    </bean>
    <!--从数据源-->
    <bean id="slave1" parent="parentDataSource">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="#{config['jdbc.url1']}"/>
        <property name="username" value="#{config['jdbc.username1']}"/>
        <property name="password" value="#{config['jdbc.password1']}"/>
        <property name="driverClassName" value="#{config['jdbc.driverClassName']}"/>
    </bean>
    <!--602数据库-->
    <bean id="yg602" parent="parentDataSource">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="#{config['jdbc.url.602']}"/>
        <property name="username" value="#{config['jdbc.username.602']}"/>
        <property name="password" value="#{config['jdbc.password.602']}"/>
        <property name="driverClassName" value="#{config['jdbc.driverClassName']}"/>
    </bean>
    <!--618数据库-->
    <bean id="yg618" parent="parentDataSource">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="#{config['jdbc.url.618']}"/>
        <property name="username" value="#{config['jdbc.username.618']}"/>
        <property name="password" value="#{config['jdbc.password.618']}"/>
        <property name="driverClassName" value="#{config['jdbc.driverClassName']}"/>
    </bean>
    <!--动态数据源-->
    <bean id="dataSource" class="com.yg.core.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="master"/>
                <entry key="slave1" value-ref="slave1"/>
<!--                <entry key="yg602" value-ref="yg602"/>
                <entry key="yg618" value-ref="yg618"/>-->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="master"/>
    </bean>
    <!--    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
            <property name="basenames">
                <list>
                    <value>message</value>
                    <value>org/hibernate/validator/ValidationMessages</value>
                </list>
            </property>
            <property name="defaultEncoding" value="UTF-8"/>
            <property name="commonMessages" value="message"/>
        </bean>-->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>message</value>
                <value>org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>

        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="86400"/>
        <property name="commonMessages" value="messages"/>
    </bean>
    <!-- 导入ehcache的配置文件 -->
    <!--<import resource="spring-ehcache.xml"/>-->

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <!--    <bean id="cartDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
            <property name="mapperInterface" value="ICartDao"></property>
            <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
        </bean>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yg.dao"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <!--<property name="markerInterface" ref=""/>-->
    </bean>

    <!-- =================Spring data REDIS configuration =============================== -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="50"></property>
        <property name="maxIdle" value="6"></property>
        <property name="maxWaitMillis" value="15000"></property>
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <property name="numTestsPerEvictionRun" value="3"></property>
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <property name="hostName" value="#{config['jedis.host']}"></property>
        <property name="port" value="6379"></property>
        <property name="password" value="#{config['jedis.pwd']}"></property>
        <property name="timeout" value="15000"></property>
        <property name="usePool" value="true"></property>
    </bean>
    <bean id="jdkRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
<!--        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>-->
    </bean>

    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
          c:redisOperations-ref="jedisTemplate">
        <property name="cacheNames">
            <set>
                <value>front</value>
                <value>backstage</value>
                <value>common</value>
                <value>system</value>
            </set>
        </property>
        <property name="expires">
            <map>
                <entry key="front" value="300"/><!--5min//TODO:测试环境-->
                <entry key="backstage" value="86400"/><!--4小时-->
                <entry key="common" value="900"/><!--15分钟-->
                <entry key="system" value="8640000"/><!--100天-->
                <!--<entry key="system" value="14400"/>&lt;!&ndash;测试环境10分钟&ndash;&gt;-->
            </map>
        </property>
        <property name="defaultExpiration" value="3600"/>
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" c:poolConfig-ref="jedisPoolConfig"
          c:host="#{config['jedis.host']}" c:password="#{config['jedis.pwd']}" c:port="6379" c:timeout="15000"/>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:configuration.xml"></property>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mapping/*.xml"/>
        <property name="typeAliasesPackage" value="com.yg.pojo"/>
    </bean>
    <bean id="jdbcTemplate618" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
          lazy-init="false" autowire="default" >
        <property name="dataSource">
            <ref bean="yg618" />
        </property>
    </bean>
    <bean id="jdbcTemplate602" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
          lazy-init="false" autowire="default" >
        <property name="dataSource">
            <ref bean="yg602" />
        </property>
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" c:sqlSessionFactory-ref="sqlSessionFactory" />
    <!-- =================Spring data REDIS configuration end================================= -->
    <!--    <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
            &lt;!&ndash;<property name="servers" value="#{configproperties['memcached.server.url']}" />&ndash;&gt;
            <property name="servers" value="#{config['memcache.session.address}"/>
            <property name="protocol" value="BINARY"/>
            <property name="transcoder">
                <bean class="net.spy.memcached.transcoders.SerializingTranscoder">
                    <property name="compressionThreshold" value="1024"/>
                </bean>
            </property>
            <property name="opTimeout" value="1000"/>
            <property name="timeoutExceptionThreshold" value="2000"/>
            &lt;!&ndash; 这是一个坑：<property name="hashAlg" value="KETAMA_HASH"/>&ndash;&gt;
            <property name="hashAlg">
                <value type="net.spy.memcached.DefaultHashAlgorithm">KETAMA_HASH</value>
            </property>
            <property name="locatorType" value="CONSISTENT"/>
            <property name="failureMode" value="Redistribute"/>
            <property name="useNagleAlgorithm" value="false"/>
        </bean>-->
    <!--  <bean id="cacheManager" class="com.hhn.util.CacheManager">
          <property name="client" ref="memcachedClient"/>
          <property name="caches">
              <set>
                  <bean class="com.hhn.util.MyCache">
                      <property name="name" value="dbQuery"/>
                      <property name="client" ref="memcachedClient"/>
                      <property name="expire" value="259200"/>
                  </bean>
                  <ref bean="cache"/>
              </set>
          </property>
      </bean>
      <bean id="cache" class="com.hhn.util.MyCache">
          <property name="name" value="commonData"/>
          <property name="client" ref="memcachedClient"/>
          <property name="expire" value="259200"/>
      </bean>-->
    <!-- 用户登录filter -->
    <!--    <bean id="userLoginFilter" class="com.hhn.filter.UserLoginFilter" >
            <property name="loginView" value="#{config['hhn.login}"/>
            <property name="adminLoginView" value="#{config['hhn.admin.login}"/>
            <property name="topView" value="#{config['hhn.top.url}"/>
            <property name="footerView" value="#{config['hhn.footer.url}"/>
        </bean>-->
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>
</beans>